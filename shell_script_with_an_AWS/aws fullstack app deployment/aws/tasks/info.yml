---
- name: Gather information about VPCs
  amazon.aws.ec2_vpc_net_info:
    filters:
      "tag:Name": "{{ AWS_PREFIX }}_VPC"
  register: aws_vpc_info
- name: Gather information about subnets
  amazon.aws.ec2_vpc_subnet_info:
    filters:
      vpc-id: "{{ aws_vpc_info.vpcs[0].vpc_id }}"
      "tag:Name": "{{ AWS_PREFIX }}_SUBNET"
  when: aws_vpc_info.vpcs | length > 0
  register: aws_subnet_info
- name: Gather info about the Internet gateway
  community.aws.ec2_vpc_igw_info:
    filters:
      "tag:Name": "{{ AWS_PREFIX }}_IGW"
      attachment.vpc-id: "{{ aws_vpc_info.vpcs[0].vpc_id }}"
  when: aws_vpc_info.vpcs | length
  register: aws_igw_info
- name: Gather info about the routing table
  community.aws.ec2_vpc_route_table_info:
    filters:
      "tag:Name": "{{ AWS_PREFIX }}_RTBL"
      association.subnet-id: "{{ aws_subnet_info.subnets[0].subnet_id }}"
  when: aws_subnet_info is defined and aws_subnet_info.subnets | length > 0
  register: aws_route_info
- name: Gather info about the security group
  amazon.aws.ec2_group_info:
    filters:
      group-name: "{{ AWS_PREFIX }}_SECGRP"
      vpc_id: "{{ aws_vpc_info.vpcs[0].vpc_id }}"
  when: aws_vpc_info.vpcs | length > 0
  register: aws_group_info
- name: Gather info about the EC2 instance(s)
  community.aws.ec2_instance_info:
    filters:
      "tag:Name": "{{ AWS_PREFIX }}_EC2"
  register: aws_ec2_info
- name: Setup aws_output 1
  set_fact:
    aws_output:
     - "Found VPC: {{ aws_vpc_info.vpcs[0].tags.Name }} {{ aws_vpc_info.vpcs[0].cidr_block }} (ID {{ aws_vpc_info.vpcs[0].vpc_id }})"
     - "Found subnet: {{ aws_subnet_info.subnets[0].tags.Name }} {{ aws_subnet_info.subnets[0].cidr_block }} (ID {{aws_subnet_info.subnets[0].subnet_id }})"
     - "Found Internet gateway: {{ aws_igw_info.internet_gateways[0].internet_gateway_id }} (attached to VPC {{ aws_igw_info.internet_gateways[0].attachments[0].vpc_id }})"
     - "Found routing table: {{ aws_route_info.route_tables[0].tags.Name }} (attached to subnet {{ aws_route_info.route_tables[0].associations[0].subnet_id }})"
- name: Setup routing tables aws_output
  set_fact:
    line: "  Route: {{ item.destination_cidr_block }} -> {{ item.gateway_id }}"
  with_items: "{{ aws_route_info.route_tables[0].routes }}"
  loop_control:
    label: "{{ item.destination_cidr_block }}"
  register: route_tables_desc
- name: Add routing tables to aws_output
  set_fact:
    aws_output: "{{ aws_output + route_tables_desc.results | map(attribute='ansible_facts.line') }}"
- name: Setup security group aws_output
  set_fact:
    secgroup: "Found security group: {{ aws_group_info.security_groups[0].group_name }}"
- name: Setup security group rules aws_output
  set_fact:
    line: "  From: {{ item.ip_ranges | map(attribute='cidr_ip') }} on {{ item.ip_protocol }}/{{ item.to_port }}"
  with_items: "{{ aws_group_info.security_groups[0].ip_permissions }}" 
  loop_control: { label: "{{ item.ip_protocol}} {{ item.to_port }}" }
  register: secgroup_rules
- name: Add security group to aws_output
  set_fact:
    aws_output: "{{ aws_output + [ secgroup ] + secgroup_rules.results | map(attribute='ansible_facts.line') }}"
- name: Setup EC2 instances aws_output
  set_fact:
    line: "Found instance: {{ item.tags.Name }} {{ item.state.name }} ({{ item.public_ip_address | default('NO PUBLIC IP ADDRESS!') }})"
  with_items: "{{ aws_ec2_info.instances }}"
  loop_control: { label: "{{ item.tags.Name }}" }
  register: ec2_desc
- name: Add EC2 list to aws_output
  set_fact:
    aws_output: "{{ aws_output + ec2_desc.results | map(attribute='ansible_facts.line') }}"
- name: Display info about the infrastructure
  debug: { msg: "{{ aws_output }}" }
